// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package database

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SysUser, error)
		FindOneByLoginUser(ctx context.Context, loginUser string) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSysUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysUser struct {
		Id                 uint64    `db:"id"`
		CreatedAt          time.Time `db:"created_at"`
		UpdatedAt          time.Time `db:"updated_at"`
		Uuid               string    `db:"uuid"`
		Name               string    `db:"name"`
		Gender             string    `db:"gender"`
		LoginUser          string    `db:"login_user"`
		LoginPass          string    `db:"login_pass"`
		Email              string    `db:"email"`
		PhoneNum           string    `db:"phone_num"`
		IdNum              string    `db:"id_num"`
		RoleUuid           string    `db:"role_uuid"`
		TeamUuid           string    `db:"team_uuid"`
		Enable             int64     `db:"enable"`
		Picture            string    `db:"picture"`
		IsOnline           int64     `db:"is_online"`
		GroupUuid          string    `db:"group_uuid"`
		ClassUuid          string    `db:"class_uuid"`
		IsStudying         int64     `db:"is_studying"`
		LatestLoginErrTime int64     `db:"latest_login_err_time"`
	}
)

func newSysUserModel(conn sqlx.SqlConn) *defaultSysUserModel {
	return &defaultSysUserModel{
		conn:  conn,
		table: "`sys_user`",
	}
}

func (m *defaultSysUserModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, id uint64) (*SysUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
	var resp SysUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByLoginUser(ctx context.Context, loginUser string) (*SysUser, error) {
	var resp SysUser
	query := fmt.Sprintf("select %s from %s where `login_user` = ? limit 1", sysUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, loginUser)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uuid, data.Name, data.Gender, data.LoginUser, data.LoginPass, data.Email, data.PhoneNum, data.IdNum, data.RoleUuid, data.TeamUuid, data.Enable, data.Picture, data.IsOnline, data.GroupUuid, data.ClassUuid, data.IsStudying, data.LatestLoginErrTime)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, newData *SysUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Uuid, newData.Name, newData.Gender, newData.LoginUser, newData.LoginPass, newData.Email, newData.PhoneNum, newData.IdNum, newData.RoleUuid, newData.TeamUuid, newData.Enable, newData.Picture, newData.IsOnline, newData.GroupUuid, newData.ClassUuid, newData.IsStudying, newData.LatestLoginErrTime, newData.Id)
	return err
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
